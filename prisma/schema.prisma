// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model User {
    id                String              @id @default(auto()) @map("_id") @db.ObjectId
    name              String?
    email             String?
    phone             String              @unique
    password          String
    role              Role                @default(USER)
    image             Attachment?         @relation(fields: [imageId], references: [id])
    imageId           String?             @db.ObjectId
    addresses         Address[]
    createdAt         DateTime            @default(now())
    updatedAt         DateTime            @updatedAt
    verificationToken VerificationToken[]
    emailVerified     DateTime?
    phoneVerified     DateTime?
    cart              Cart                @relation(fields: [cartId], references: [id])
    cartId            String              @unique @db.ObjectId
    Invoice           Invoice[]
    Review            Review[]
}

model Product {
    id          String        @id @default(auto()) @map("_id") @db.ObjectId
    name        String
    slug        String        @unique
    description String?
    price       Float
    sale        Float         @default(0) // discount 0% by default
    quantity    Int           @default(0)
    sold        Int           @default(0)
    createdAt   DateTime      @default(now())
    updatedAt   DateTime      @updatedAt
    attachments Attachment[]
    category    Category?     @relation(fields: [categoryId], references: [id])
    categoryId  String?       @db.ObjectId
    brand       Brand?        @relation(fields: [brandId], references: [id])
    brandId     String?       @db.ObjectId
    deleted     Boolean       @default(false)
    CartItem    CartItem[]
    InvoiceItem InvoiceItem[]
    Reviews     Review[]
}

model Attachment {
    id        String         @id @default(auto()) @map("_id") @db.ObjectId
    name      String
    type      AttachmentType
    path      String
    createdAt DateTime       @default(now())
    updatedAt DateTime       @updatedAt
    product   Product?       @relation(fields: [productId], references: [id])
    productId String?        @db.ObjectId
    User      User[]
}

model Category {
    id      String    @id @default(auto()) @map("_id") @db.ObjectId
    name    String
    slug    String    @unique
    Product Product[]
}

model Cart {
    id       String     @id @default(auto()) @map("_id") @db.ObjectId
    User     User?
    CartItem CartItem[]
}

model CartItem {
    id        String  @id @default(auto()) @map("_id") @db.ObjectId
    quantity  Int
    Cart      Cart?   @relation(fields: [cartId], references: [id])
    cartId    String? @db.ObjectId
    Product   Product @relation(fields: [productId], references: [id])
    productId String  @db.ObjectId

    @@unique([cartId, productId])
}

// an invoice only contains one product
// if a user wants to buy multiple products, they have to add them to the cart first
model Invoice {
    id           String        @id @default(auto()) @map("_id") @db.ObjectId
    total        Float
    InvoicesItem InvoiceItem[]
    status       Status        @default(PENDING)
    address      Address       @relation(fields: [addressId], references: [id])
    addressId    String        @db.ObjectId
    deliveryCost Float         @default(0)
    createAt     DateTime      @default(now())
    updatedAt    DateTime      @updatedAt
    User         User          @relation(fields: [userId], references: [id])
    userId       String        @db.ObjectId

    @@unique([id, userId])
}

model InvoiceItem {
    id        String  @id @default(auto()) @map("_id") @db.ObjectId
    quantity  Int
    Invoice   Invoice @relation(fields: [invoiceId], references: [id])
    invoiceId String  @db.ObjectId
    Product   Product @relation(fields: [productId], references: [id])
    productId String  @db.ObjectId

    @@unique([invoiceId, productId])
}

model Brand {
    id      String    @id @default(auto()) @map("_id") @db.ObjectId
    name    String
    slug    String    @unique
    Product Product[]
}

model Review {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    rating    Int
    comment   String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    User      User     @relation(fields: [userId], references: [id])
    userId    String   @db.ObjectId
    Product   Product  @relation(fields: [productId], references: [id])
    productId String   @db.ObjectId

    @@unique([id, userId])
    @@unique([id, productId])
}

model Address {
    id        String    @id @default(auto()) @map("_id") @db.ObjectId
    name      String
    phone     String
    area      String // province, district, ward
    address   String // street address
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    User      User?     @relation(fields: [userId], references: [id])
    userId    String?   @db.ObjectId
    Invoice   Invoice[]

    @@unique([id, userId])
}

type VerificationToken {
    token     String
    type      VerificationTokenType
    expiredAt DateTime
}

enum Role {
    ADMIN
    USER
}

enum VerificationTokenType {
    EMAIL
    PHONE
}

enum AttachmentType {
    IMAGE
    VIDEO
}

enum Status {
    PENDING
    PROCESSING
    DELIVERING
    DELIVERED
    CANCELLED
    RETURNING
    RETURNED
}
